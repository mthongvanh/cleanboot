// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members, prefer-match-file-name, long-method
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    assert(
      dotenv.env['FIREBASE_ANDROID_API_KEY']?.isNotEmpty == true,
      'looks like you forgot to specify .env file. ask your leader for help.',
    );
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get android => FirebaseOptions(
        apiKey: dotenv.env['FIREBASE_ANDROID_API_KEY'] ?? "",
        appId: dotenv.env['FIREBASE_AAPP_ID'] ?? "",
        messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? "",
        projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? "",
        databaseURL: dotenv.env['FIREBASE_DATABASE_URL'],
        storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET'],
      );

  static FirebaseOptions get ios => FirebaseOptions(
        apiKey: dotenv.env['FIREBASE_IOS_API_KEY'] ?? "",
        appId: dotenv.env['FIREBASE_APP_ID'] ?? "",
        messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? "",
        projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? "",
        databaseURL: dotenv.env['FIREBASE_DATABASE_URL'],
        storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET'],
        androidClientId: dotenv.env['FIREBASE_ANDROID_CLIENT_ID'],
        iosClientId: dotenv.env['FIREBASE_IOS_CLIENT_ID'],
        iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID'],
      );

  static FirebaseOptions get macos => FirebaseOptions(
        apiKey: dotenv.env['FIREBASE_MACOS_API_KEY'] ?? "",
        appId: dotenv.env['FIREBASE_APP_ID'] ?? "",
        messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID'] ?? "",
        projectId: dotenv.env['FIREBASE_PROJECT_ID'] ?? "",
        databaseURL: dotenv.env['FIREBASE_DATABASE_URL'],
        storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET'],
        iosClientId: dotenv.env['FIREBASE_MACOS_IOS_CLIENT_ID'],
        iosBundleId: dotenv.env['FIREBASE_MACOS_IOS_BUNDLE_ID'],
      );
}
